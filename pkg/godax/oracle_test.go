package godax

import (
	"reflect"
	"testing"
)

func TestClient_GetOracle(t *testing.T) {
	tests := []struct {
		name    string
		fields  fields
		want    Oracle
		wantRaw string
		wantErr bool
	}{
		{
			name:   "when a successful call is made to get oracle data",
			fields: defaultFields(),
			want: Oracle{
				Timestamp: "1583195520",
				Messages: []string{
					"0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005e5da58000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000020f3570580000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034254430000000000000000000000000000000000000000000000000000000000",
					"0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005e5da58000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000da3f9500000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000",
				},
				Signatures: []string{
					"0x8318875F720F88683B75C949A1E83FCEFBD586AE8A8276944F126CDBA176F3844B05C92D1B4393DCF1DAD2D59B88F196C9ABA988141265BDACBFDBC90049FA211c",
					"0x69BD1ECDF391B2A24D61C8FAB6FF1874DCC5CDCFB1B691DC14BC288503B0B460F43F5CDD83615B0D3E785110279A85C75E19C6ED3A645DC9A084B9BC6B8584BE1b",
				},
				Prices: map[string]string{
					"BTC": "8845.095000000001",
					"ETH": "228.85",
					"LTC": "51.90",
				},
			},
			wantRaw: `{
                "timestamp": "1583195520",
                "messages": [
                    "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005e5da58000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000020f3570580000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034254430000000000000000000000000000000000000000000000000000000000",
                    "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005e5da58000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000da3f9500000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000"
                ],
                "signatures": [
                    "0x8318875F720F88683B75C949A1E83FCEFBD586AE8A8276944F126CDBA176F3844B05C92D1B4393DCF1DAD2D59B88F196C9ABA988141265BDACBFDBC90049FA211c",
                    "0x69BD1ECDF391B2A24D61C8FAB6FF1874DCC5CDCFB1B691DC14BC288503B0B460F43F5CDD83615B0D3E785110279A85C75E19C6ED3A645DC9A084B9BC6B8584BE1b"
                ],
                "prices": {
                    "BTC": "8845.095000000001",
                    "ETH": "228.85",
                    "LTC": "51.90"
                }
            }`,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mockClient := MockResponse(tt.wantRaw)

			c := &Client{
				baseRestURL: tt.fields.baseRestURL,
				baseWsURL:   tt.fields.baseWsURL,
				key:         tt.fields.key,
				secret:      tt.fields.secret,
				passphrase:  tt.fields.passphrase,
				httpClient:  mockClient,
			}

			got, err := c.GetOracle()
			if (err != nil) != tt.wantErr {
				t.Errorf("Client.GetOracle() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			if len(c.httpClient.(*MockClient).Requests) != 1 {
				t.Errorf("should have made one request, but made: %d", len(c.httpClient.(*MockClient).Requests))
			}

			validateHeaders(t, c)

			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Client.GetOracle() = %v, want %v", got, tt.want)
			}
		})
	}
}
